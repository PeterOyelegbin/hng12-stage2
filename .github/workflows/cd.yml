name: CD Pipeline

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy:
    name: Deploy API
    runs-on: ubuntu-latest

    steps:
      - name: Display Deployment Trigger Information
        run: |
          echo "ðŸš€ Deployment triggered by a ${{ github.event_name }} event to the main branch."
          echo "ðŸ”„ Updating the deployed API with the latest changes."

      - name: Checkout Repository Code
        uses: actions/checkout@v3

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo -e "${{ secrets.DEV_KP }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ vars.SERVER }} >> ~/.ssh/known_hosts

      - name: Connect to EC2 and Deploy API
        run: |
          echo "ðŸ”— Connecting to AWS EC2 instance to deploy API."
          ssh -i ~/.ssh/id_rsa ${{ vars.USER }}@${{ vars.SERVER }} << 'EOF'
            set -e  # Exit on error
            
            # Update packages
            echo "*** ðŸ“‚ Updating package lists ***"
            sudo apt update && sudo apt upgrade -y

            # Install necessary packages
            echo "*** ðŸ“¦ Installing dependencies ***"
            sudo apt install -y nginx git python3 python3-pip python3-venv

            # Clone or update the repository
            cd ~
            if [ -d "hng12-stage2" ]; then
                echo "*** ðŸ”„ Pulling latest changes from repository. ***"
                cd hng12-stage2
                git reset --hard
                git pull origin main
            else
                echo "*** ðŸ“‚ Cloning repository for the first time. ***"
                git clone https://github.com/PeterOyelegbin/hng12-stage2.git
                cd hng12-stage2
            fi

            # Set up virtual environment and install dependencies
            echo "*** ðŸ“¦ Setting up virtual environment... ***"
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # Create a systemd service for FastAPI
            echo "*** ðŸ›  Creating systemd service for FastAPI... ***"
            cat <<EOF | sudo tee /etc/systemd/system/fastapi.service
              [Unit]
              Description=FastAPI Application
              After=network.target

              [Service]
              User=ubuntu
              Group=ubuntu
              WorkingDirectory=/home/${{ var.USER }}/hng12-stage2
              ExecStart=/home/${{ var.USER }}/hng12-stage2/venv/bin/uvicorn main:app --host 0.0.0.0 --port 8000
              Restart=always

              [Install]
              WantedBy=multi-user.target
              EOF

            # Reload systemd, enable and start FastAPI service
            echo "*** ðŸ”„ Starting FastAPI service... ***"
            sudo systemctl daemon-reload
            sudo systemctl enable fastapi
            sudo systemctl restart fastapi

            # Configure Nginx as a reverse proxy
            echo "*** ðŸ›  Configuring Nginx... ***"
            sudo tee /etc/nginx/sites-available/default > /dev/null <<EOF
              server {
                  listen 80;
                  server_name _;

                  location / {
                      proxy_pass http://127.0.0.1:8000;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
              }
              EOF

            # Enable the Nginx configuration
            sudo ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/
            sudo systemctl restart nginx

            # Open firewall ports
            echo "*** ðŸ›  Allowing necessary ports through UFW... ***"
            sudo ufw allow 'Nginx Full'
            sudo ufw allow 8000
            sudo ufw enable

            # Display status
            echo "*** ðŸš€ Deployment completed! ***"
            sudo systemctl daemon-reload
            sudo systemctl restart fastapi
            sudo systemctl status fastapi --no-pager
          EOF

      - name: Confirm Deployment Status
        run: echo "âœ… Deployment completed successfully."
